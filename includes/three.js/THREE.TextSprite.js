!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(require("three"),require("three.texttexture")):"function"==typeof define&&define.amd?define(["three","three.texttexture"],e):e(t.THREE)}(this,function(t){"use strict";var e=function(t,e,i){this.redraw(t,i)};(t=t&&t.hasOwnProperty("default")?t.default:t).TextSprite=function(i){function r(r){void 0===r&&(r={});var a=r.textSize;void 0===a&&(a=1);var o=r.redrawInterval;void 0===o&&(o=1);var n=r.maxFontSize;void 0===n&&(n=1/0);var s=r.material;void 0===s&&(s={});var p=r.texture;void 0===p&&(p={}),i.call(this,new t.SpriteMaterial(Object.assign({},s,{map:new t.TextTexture(p)}))),this.textSize=a,this.redrawInterval=o,this.maxFontSize=n,this.lastRedraw=0,this._renderMesh=new t.Mesh,this._renderMesh.onBeforeRender=e.bind(this),this.add(this._renderMesh)}i&&(r.__proto__=i),(r.prototype=Object.create(i&&i.prototype)).constructor=r;var a={isTextSprite:{configurable:!0}};return a.isTextSprite.get=function(){return!0},r.prototype.updateScale=function(){this.scale.set(this.material.map.aspect,1,1).multiplyScalar(this.textSize)},r.prototype.updateMatrix=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return this.updateScale(),i.prototype.updateMatrix.apply(this,t)},r.prototype.computeOptimalFontSize=function(t,e){if(t.domElement.width&&t.domElement.height&&this.material.map.textBoxHeight){var i=this.getWorldPosition().distanceTo(e.getWorldPosition());if(i){var r=this.getWorldScale().y*t.domElement.height/i;if(r)return Math.round(r/this.material.map.paddingBoxHeight)}}return 0},r.prototype.redraw=function(t,e){var i=this;this.lastRedraw+this.redrawInterval<Date.now()&&(this.redrawInterval?setTimeout(function(){i.redrawNow(t,e)},1):this.redrawNow(t,e))},r.prototype.redrawNow=function(e,i){this.updateScale();var r=this.computeOptimalFontSize(e,i);r=t.Math.ceilPowerOfTwo(r),r=Math.min(r,this.maxFontSize),this.material.map.fontSize=r,this.material.map.autoRedraw||this.material.map.redraw(),this.lastRedraw=Date.now()},r.prototype.dispose=function(){this.material.map.dispose(),this.material.dispose()},Object.defineProperties(r.prototype,a),r}(t.Sprite)});
